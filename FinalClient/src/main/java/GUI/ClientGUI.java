/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import FinalClient.FinalClientRMIRootInterface;
import blockchain.WalletWrapper;
import java.awt.SystemColor;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import org.json.JSONObject;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author silvia
 */
public class ClientGUI extends javax.swing.JFrame {

    private final WalletWrapper ww;
    private FinalClientRMIRootInterface lookUp;
    private static String currentPrice;

    /**
     * Creates new form ClientGUI
     */
    public ClientGUI() {
        this.ww = new WalletWrapper();
        initComponents();
        currentPrice = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        balanceLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        sendBitcoinButton = new javax.swing.JButton();
        addressTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();
        sverLabel = new javax.swing.JLabel();
        sveLabel = new javax.swing.JLabel();
        sverTextField = new javax.swing.JTextField();
        sveTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rechargejButton = new javax.swing.JButton();
        rechargeTextField = new javax.swing.JTextField();
        instantBuyjButton = new javax.swing.JButton();
        getCreditjButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startButton.setText("Start wallet & connect");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        balanceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        balanceLabel.setText("  ");

        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Welcome to the SIoT Client App!");

        sendBitcoinButton.setText("Send bitcoin and purchase");
        sendBitcoinButton.setEnabled(false);
        sendBitcoinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBitcoinButtonActionPerformed(evt);
            }
        });

        addressTextField.setText("n2dVfxCAtYHxAu8R9t8Vmy6KWZviv3bs47");
        addressTextField.setEnabled(false);

        resultTextArea.setEditable(false);
        resultTextArea.setColumns(20);
        resultTextArea.setRows(4);
        resultTextArea.setToolTipText("");
        resultTextArea.setWrapStyleWord(true);
        resultTextArea.setEnabled(false);
        jScrollPane1.setViewportView(resultTextArea);

        sverLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sverLabel.setText("Insert SVER ID:");
        sverLabel.setEnabled(false);

        sveLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sveLabel.setText("Insert SVE ID:");
        sveLabel.setEnabled(false);

        sverTextField.setText("0");
        sverTextField.setEnabled(false);
        sverTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sverTextFieldActionPerformed(evt);
            }
        });

        sveTextField.setText("1");
        sveTextField.setEnabled(false);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        priceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        priceLabel.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(balanceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addressTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendBitcoinButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sveLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sverLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .addComponent(sverTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sveTextField, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(balanceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sverLabel)
                    .addComponent(sverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sveLabel)
                    .addComponent(sveTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton)
                    .addComponent(jLabel1)
                    .addComponent(priceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendBitcoinButton)
                    .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Want to save time? Recharge your credit!");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("The next time you will get the data instantly!");

        jLabel4.setText("Amount to charge (at least 1000 satoshis): ");

        rechargejButton.setText("Send");
        rechargejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechargejButtonActionPerformed(evt);
            }
        });

        instantBuyjButton.setText("Instant Buy");
        instantBuyjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instantBuyjButtonActionPerformed(evt);
            }
        });

        getCreditjButton.setText("Check Credit");
        getCreditjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getCreditjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rechargeTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rechargejButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(getCreditjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(instantBuyjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(rechargejButton)
                    .addComponent(rechargeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instantBuyjButton)
                    .addComponent(getCreditjButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try {
            String url = "http://localhost:8080/Sim/SIoT/Server/"
                    + sverTextField.getText() + "/"
                    + sveTextField.getText();
            URL obj = new URL(url);
            HttpURLConnection conn = (HttpURLConnection) obj.openConnection();
            conn.setRequestMethod("GET");
            StringBuilder response;
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String inputLine;
            response = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            JSONObject myResponse = new JSONObject(response.toString());
            priceLabel.setText("PRICE: " + myResponse.getString("price") + " satoshis");
            currentPrice = myResponse.getString("price");

        } catch (MalformedURLException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void sverTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sverTextFieldActionPerformed
        // add your handling code here:
    }//GEN-LAST:event_sverTextFieldActionPerformed

    private void sendBitcoinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBitcoinButtonActionPerformed
        if (currentPrice != null) {
            // TIMESTAMP
            long before = System.currentTimeMillis();
            String trx = ww.sendBitcoin(currentPrice, addressTextField.getText());
            String sverId = sverTextField.getText();
            String sveId = sveTextField.getText();
            
            writeOnFile(trx, before, "parte1.csv");
            
            // Lo sleep non serve
//            try {
//                Thread.sleep(500);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
//            }
            try {
                String result = lookUp.requestDataWithTrx(trx, sverId, sveId);
                // TIMESTAMP
                long after = System.currentTimeMillis();
                System.out.println(result);
                resultTextArea.setLineWrap(true);
                resultTextArea.setEnabled(true);
                resultTextArea.append(result + "\n");
                // DELAY
                calculateDelay(before, after, "standardBuyDelays.txt");
            } catch (RemoteException ex) {
                Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            balanceLabel.setText("My balance is: "
                    + ww.getTc().getWallet().getBalance().toFriendlyString());
        } else {
            priceLabel.setText("Error");
        }

    }//GEN-LAST:event_sendBitcoinButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        ww.createWallet();
        balanceLabel.setText("My balance is: "
                + ww.getTc().getWallet().getBalance().toFriendlyString());
        try {
            Registry registry = LocateRegistry.getRegistry(Setup.Setup.IP_SERVER, 4849);
            lookUp = (FinalClientRMIRootInterface) registry.lookup("FinalClientRMIRoot");
            System.out.println("Connetted to SIoT");
            addressTextField.setEnabled(true);
            sendBitcoinButton.setEnabled(true);
            sveLabel.setEnabled(true);
            sverLabel.setEnabled(true);
            sveTextField.setEnabled(true);
            sverTextField.setEnabled(true);
            searchButton.setEnabled(true);
        } catch (RemoteException | NotBoundException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void instantBuyjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instantBuyjButtonActionPerformed
        try {
            // TIMESTAMP
            long before = System.currentTimeMillis();
            String sverId = sverTextField.getText();
            String sveId = sveTextField.getText();
            String result = lookUp.requestDatawithCredit(sverId, sveId, Setup.Setup.USER_ID);
            System.out.println(result);
            // TIMESTAMP
            long after = System.currentTimeMillis();
            resultTextArea.setLineWrap(true);
            resultTextArea.setEnabled(true);
            resultTextArea.append(result + "\n");
            // DELAY
            calculateDelay(before, after, "instantBuyDelays.txt");

        } catch (RemoteException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_instantBuyjButtonActionPerformed

    private void rechargejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechargejButtonActionPerformed
        int amount = Integer.parseInt(rechargeTextField.getText());
        String trx = ww.sendBitcoin(rechargeTextField.getText(), "mjvRjidP7u7bqBQA9CsZFUJxB1si9nqaAF");
        String result = null;
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            result = lookUp.rechargeCredit(trx, Setup.Setup.USER_ID, amount);
            System.out.println(result);
            resultTextArea.setLineWrap(true);
            resultTextArea.setEnabled(true);
            resultTextArea.append(result + "\n");
        } catch (RemoteException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        balanceLabel.setText("My balance is: "
                + ww.getTc().getWallet().getBalance().toFriendlyString());


    }//GEN-LAST:event_rechargejButtonActionPerformed

    private void getCreditjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getCreditjButtonActionPerformed
        int credit = 0;
        try {
            credit = lookUp.getCredit(Setup.Setup.USER_ID);
        } catch (RemoteException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        resultTextArea.setLineWrap(true);
        resultTextArea.setEnabled(true);
        resultTextArea.append("Your credit is: " + credit + " satoshis \n");
    }//GEN-LAST:event_getCreditjButtonActionPerformed

    private void calculateDelay(long before, long after, String fileDesc) {
        FileWriter out = null;
        try {
            long delay = after - before;
            // Write on file
            out = new FileWriter(fileDesc, true);
            out.write(delay+"\n");
        } catch (IOException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void writeOnFile(String trx, long value, String fileDesc) {
        FileWriter out = null;
        try {
            out = new FileWriter(fileDesc, true);
            out.write(trx + "," + value + "\n");
        } catch (IOException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressTextField;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JButton getCreditjButton;
    private javax.swing.JButton instantBuyjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField rechargeTextField;
    private javax.swing.JButton rechargejButton;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton sendBitcoinButton;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel sveLabel;
    private javax.swing.JTextField sveTextField;
    private javax.swing.JLabel sverLabel;
    private javax.swing.JTextField sverTextField;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
