/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Systems;

import Servers.Server;
import Entities.ClientInterface;
import Entities.Client;
import NetGraph.NetGraph;
import Servers.RMIInterface;
import Servers.RelFactory;
import Settings.Setup;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.io.FileNotFoundException;
import javax.swing.*;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import resourcesupdater.ResourcesUpdater;
import thingspeak.ThingSpeakException;

/**
 *
 * @author Salvo
 */
public class EngineSimulator extends javax.swing.JFrame {

    GridsSystems GRIDS_SYSTEMS;
    List<HashMap> mappaBuffer;
    private static RMIInterface look_up;
    private static RMIRootInterface root_look_up;
    List<Client> entities;
    ArrayList<Server> servers;
    List<ClientInterface> ListaClient;
    List<ClientInterface> ListaClientProb;
    Random rand = new Random(1);
    public boolean compute_betweenness;
    public boolean relationship_ini_ignore;

    /**
     * Creates new form EngineSim
     */
    public EngineSimulator() throws RemoteException {
        // GRIDS_SYSTEMS = new GridsSystems();
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customSim = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        betweenness1 = new javax.swing.JCheckBox();
        ViewGraph = new javax.swing.JButton();
        RelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        customSim.setText("Run Platform");
        customSim.setToolTipText("");
        customSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customSimActionPerformed(evt);
            }
        });

        betweenness1.setText("Compute betweenness");
        betweenness1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betweenness1ActionPerformed(evt);
            }
        });

        ViewGraph.setText("View Graph");
        ViewGraph.setToolTipText("");
        ViewGraph.setEnabled(false);
        ViewGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewGraphActionPerformed(evt);
            }
        });

        RelButton.setText("Create Relationship");
        RelButton.setToolTipText("");
        RelButton.setEnabled(false);
        RelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(customSim)
                                        .addComponent(RelButton))
                                .addGap(57, 57, 57)
                                .addComponent(betweenness1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ViewGraph)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(customSim)
                                        .addComponent(betweenness1)
                                        .addComponent(ViewGraph))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RelButton)
                                .addGap(49, 49, 49)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customSimActionPerformed
        try {
            this.start_custom_sim();
        } catch (IOException | NotBoundException | UnirestException | ThingSpeakException
                | SQLException | ClassNotFoundException ex) {
            Logger.getLogger(EngineSimulator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_customSimActionPerformed

    private void betweenness1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_betweenness1ActionPerformed
        AbstractButton abstractButton = (AbstractButton) evt.getSource();
        boolean selected = abstractButton.getModel().isSelected();

        if (selected) {
            this.compute_betweenness = true;
        } else {
            this.compute_betweenness = false;
        }
    }//GEN-LAST:event_betweenness1ActionPerformed

    private void ViewGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewGraphActionPerformed

        NetGraph g = null;
        try {
            // root_look_up = (RMIRootInterface) Naming.lookup("//localhost/root");

            g = new NetGraph(this.compute_betweenness, this.ListaClient);
            Thread th = new Thread(g);

            th.start();

        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(EngineSimulator.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ViewGraphActionPerformed

    private void RelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RelButtonActionPerformed
        try {
            this.CreateRelationship();
            this.ViewGraph.setEnabled(true);
        } catch (FileNotFoundException | UnknownHostException | RemoteException
                | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(EngineSimulator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EngineSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EngineSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EngineSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EngineSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {
                    new EngineSimulator().setVisible(true);
                } catch (RemoteException ex) {
                    Logger.getLogger(EngineSimulator.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

    }

    public void start_custom_sim() throws IOException, NotBoundException, UnirestException,
            ThingSpeakException, SQLException, ClassNotFoundException {

        CustomSimulation customSim = new CustomSimulation();

        try {

            /**
             * **********************************
             */
            customSim.initNetwork(
                    Float.parseFloat("1"),
                    this.compute_betweenness,
                    this.relationship_ini_ignore);

            /**
             * ***********************************
             */
            ResourcesUpdater ru = new ResourcesUpdater();
            //ru.UpdateThingsSpeack_SVE_Resources();  //create the SVE inside the SVER!
            //ru.UpdateFestival_SVE_Resources();

            this.RelButton.setEnabled(true);
            return;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(EngineSimulator.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void CreateRelationship() throws FileNotFoundException, UnknownHostException,
            RemoteException, NotBoundException, MalformedURLException {
        try {
            Map<Integer, Double> probabilities;
            this.generateList();
            probabilities = this.initPtobabilities();
            RelFactory rf = new RelFactory(); //" da abilitare!!!!!!
            rf.CreateRealationship_logic(probabilities, this.ListaClient); //create probabilistic friednship

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(EngineSimulator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public Map<Integer, Double> initPtobabilities() throws FileNotFoundException {
        Gson gson = new Gson();
        Map<Integer, Double> mapProb = gson.fromJson(new InputStreamReader(
                this.getClass().getResourceAsStream("/probabilities.ini")),
                new TypeToken<Map<Integer, Double>>() {
                }.getType());
        return mapProb;
    }

    public void generateList() throws ClassNotFoundException, SQLException, RemoteException,
            NotBoundException, MalformedURLException {
        this.ListaClient = new ArrayList<>();
        HashMap<String, String> ServerList = new HashMap<String, String>();
        root_look_up = (RMIRootInterface) Naming.lookup("//" + Setup.GATEWAY + "/root");
        ServerList = root_look_up.getAddressServerList();
        for (String s : ServerList.keySet()) {

            ClientInterface c;
            Class.forName("com.mysql.jdbc.Driver");  // MySQL database connection

            Connection conn = DriverManager.getConnection("jdbc:mysql://"
                    + ServerList.get(s) + ":3306/social_iot_platform?" + "user=ing&password=salvo1993");
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM sver");
            while (rs.next()) {
                c = new Client(rs.getString("sver.uid"), rs.getString("sver.areas"),
                        rs.getString("sver.meta"), rs.getString("sver.ip"),
                        Integer.parseInt(rs.getString("sver.server")),
                        rs.getString("sver.price"), rs.getString("sver.walletAddress"));
                this.ListaClient.add(c);
            }
            rs.close();
            conn.close();
        }
    }

    private String generateID() {
        UUID id = UUID.randomUUID();
        return id.toString();
    }

    // End of variables declaration                   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton RelButton;
    public javax.swing.JButton ViewGraph;
    private javax.swing.JCheckBox betweenness1;
    public javax.swing.JButton customSim;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
